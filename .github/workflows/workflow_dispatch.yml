name: Deploy Environments

on:
  push:
    branches:
      - higher-environments
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'

env:
  staging:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ID }}
    AWS_REGION: "eu-west-1"
    S3_BUCKET_NAME: "bucketforbackendstate"
  prod:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID_SEC_ACC }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ID_SEC_ACC }}
    AWS_REGION: "eu-west-1"
    S3_BUCKET_NAME: "bucketforbackendstate-prod"

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Install dependencies
        run: |
          ls
          python -m pip install --upgrade pip
          pip install pymysql -t lambda_function/
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'push'
        run: terraform plan 
        continue-on-error: false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
        
  deploy-prod:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'prod' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Install dependencies
        run: |
          ls
          python -m pip install --upgrade pip
          pip install pymysql -t lambda_function/
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'push'
        run: terraform plan 
        continue-on-error: false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
